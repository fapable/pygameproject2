# dit moet onder ""def fichedev(self)"" fucntie in de class Player

################################################################################################
    def winner(self):
        if (self.pos.x, self.pos.y) == (2, 0) and self.moves == 0 and self.turn and self.alive:
            # upload winner screen
            H.insert_naam(self.namet, self.score)
            H.update_score(self.namet, self.score)
            print("winnaar")

##################################################################################################

import psycopg2
import pygame

pygame.init()

def interact_with_database(command):
    connection = psycopg2.connect("dbname=project2 user=postgres host=localhost password=Marutza!")
    cursor = connection.cursor()

    # Execute the command
    cursor.execute(command)
    connection.commit()

    # Save results
    results = None
    try:
        results = cursor.fetchall()
    except psycopg2.ProgrammingError:
        # Nothing to fetch
        pass

    # Close connection
    cursor.close()
    connection.close()

    return results


def update_score(name, score):
    score += 10
    upload_score(name, score)

def upload_score(name, score):
    interact_with_database("UPDATE player SET score = {} WHERE name = '{}'"
                           .format(score, name))
def insert_naam(name, score):
    interact_with_database("INSERT INTO player VALUES ('{}',{})".format(name, score))

def download_top_score():
    result = interact_with_database("SELECT name,score FROM player ORDER BY score DESC")[0][0]
    return result

def download_top_name():
    result = interact_with_database("SELECT * FROM player ORDER BY score DESC")[0][1]
    return str(result)

def download_top_score2():
    result = interact_with_database("SELECT name,score FROM player ORDER BY score DESC")[1][0]
    return result

def download_top_name2():
    result = interact_with_database("SELECT * FROM player ORDER BY score DESC")[1][1]
    return str(result)

def download_top_score3():
    result = interact_with_database("SELECT name,score FROM player ORDER BY score DESC")[2][0]
    return result

def download_top_name3():
    result = interact_with_database("SELECT * FROM player ORDER BY score DESC")[2][1]
    return str(result)

def screen():

    score = str(download_top_score())
    naam = str(download_top_name())
    score2 = str(download_top_score2())
    naam2 = str(download_top_name2())
    score3 = str(download_top_score3())
    naam3 = str(download_top_name3())

    screen = pygame.display.set_mode((640, 280))
    screen.fill((255,255,255))
    pygame.display.set_caption("ontsnapperdam")
    myfont = pygame.font.SysFont("Comic Sans MS", 15)

    eerste = myfont.render("1.", 200, (0, 0, 0))
    tweede = myfont.render("2.", 200, (0, 0, 0))
    derde = myfont.render("3.", 200, (0, 0, 0))

    label = myfont.render((score), 200, (0,0,0))
    label1 = myfont.render((naam), 200, (0, 0, 0))
    label2 = myfont.render((score2), 200, (0, 0, 0))
    label3 = myfont.render((naam2), 200, (0, 0, 0))
    label4 = myfont.render((score3), 200, (0, 0, 0))
    label5 = myfont.render((naam3), 200, (0, 0, 0))

    screen.blit(eerste, (260, 30))
    screen.blit(label,  (280, 30))
    screen.blit(label1, (330, 30))
    screen.blit(tweede, (260, 50))
    screen.blit(label2, (280, 50))
    screen.blit(label3, (330, 50))
    screen.blit(derde,  (260, 70))
    screen.blit(label4, (280, 70))
    screen.blit(label5, (330, 70))

    pygame.display.flip()
    # event loop
    while True:
        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                raise SystemExit
